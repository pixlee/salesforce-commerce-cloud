importPackage(dw.util);
importPackage(dw.net);
importPackage(dw.order);
importPackage(dw.system);

function execute()
{	
	try {
		if(Site.current.preferences.custom.PixleeEnabled == false){
			Logger.error("Cartridge not enabled.");
			return PIPELET_ERROR;  
		}
		
		if(Site.current.preferences.custom.PixleeSecretKey == null || Site.current.preferences.custom.PixleeApiKey == null){
			Logger.error("Pixlee Secret Key or the API Key is not defined.");
			return PIPELET_ERROR;  
		}

		exportOrders();
	} catch(ex) {
		var error = ex.message;
		Logger.error("Exception caught" + ex.message);
		return PIPELET_ERROR;
	}

	return PIPELET_NEXT;
}

function exportOrders() {
	var timeOneHourAgo = Date.now() - (3600 * 1000);
	var sortString = "creationDate DESC";
	var queryString = "creationDate > {0}";
	var ordersIterator : SeekableIterator = OrderMgr.searchOrders(queryString, sortString, new Date(timeOneHourAgo));
	var order : Order = ordersIterator.next();
	var result = [];
	
	if(order){
		result.push(getOrderBody(order));
		
		while (ordersIterator.hasNext()) {
			order = ordersIterator.next();
			result.push(getOrderBody(order));
		}
	}
	ordersIterator.close();
	sendToLimitless(result);
}

function getOrderBody(order) {
	var cart_contents = [];
	var orderProducts = order.getAllProductLineItems().toArray();
	for (var i = 0; i < orderProducts.length; i++) {
		cart_contents.push({
			product_sku: orderProducts[i].getManufacturerSKU() || orderProducts[i].getProductID(),
			price: orderProducts[i].getAdjustedGrossPrice().getValue(),
			quantity: orderProducts[i].getQuantityValue(),
			currency: order.getCurrencyCode()
		});
	}
	
	var billingAddress = order.getBillingAddress();
	var billing_address = {
		name: billingAddress.getFullName(),
		company: billingAddress.getCompanyName(),
		address1: billingAddress.getAddress1(),
		address2: billingAddress.getAddress2(),
		city: billingAddress.getCity(),
		state_code: billingAddress.getStateCode(),
		postal_code: billingAddress.getPostalCode(),
		phone: billingAddress.getPhone()
		
	};

	var result = {
		ecommerce_platform: 'demandware',
		ecommerce_platform_version: '2.5.0',
		currency: order.getCurrencyCode(),
		email: order.getCustomerEmail(),
		billing_address: billing_address,
		order_id: order.getOrderNo(),
		customer_id: order.getCustomerNo(),
		cart_type: 'demandware',
		cart_total: order.getTotalGrossPrice().getValue(),
		cart_total_quantity: order.getProductQuantityTotal(),
		cart_contents: cart_contents
 	};

 	return result;
};

// Post JSON data to API
function sendToLimitless(orders) {
	var httpClient : HTTPClient = new HTTPClient();
	httpClient.open('POST', 'https://a079ae44.ngrok.io' + '/events/demandwareConversions');
	httpClient.setRequestHeader('Content-Type', 'application/json');
	
	var post_body = {
		API_KEY: Site.current.preferences.custom.PixleeApiKey,
		orders: orders
	};
	
	httpClient.send(JSON.stringify(post_body));
	if (httpClient.statusCode == 200) {
		Logger.warn("REQUEST MADE");
	} else {
		Logger.warn("REQUEST FAILED");
	}
}

module.exports = {
	execute: function(){
		return execute();
	}
}