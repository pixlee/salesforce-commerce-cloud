/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*-   @input ExampleIn : String This is a sample comment.
*-   @output ExampleOut : Number
*
*/
importPackage( dw.system );
importPackage( dw.crypto );
importPackage( dw.util );
importPackage( dw.catalog );
importPackage( dw.web );
importPackage( dw.io );
importPackage( dw.net );
importPackage( dw.content );
importPackage( dw.svc );

var DISTILLERY_BASE_URL = "https://distillery.pixlee.com/api/v2/albums";

// Main method for export product execution
function execute()
{
	try {
		if(Site.current.preferences.custom.PixleeSecretKey == null || Site.current.preferences.custom.PixleeApiKey == null){
			Logger.error("Pixlee Secret Key is not defined.");
			return PIPELET_ERROR;  
		}

		if(Site.current.preferences.custom.PixleeEnabled == false){
			Logger.error("Cartridge not enabled.");
			return PIPELET_ERROR;  
		}

		exportProducts();
	} catch(ex) {
		var error = ex.message;
		Logger.error("Exception caught" + ex.message);
		return PIPELET_ERROR;    
	}

	return PIPELET_NEXT;
}

// Iterates through the products and prepare the data to be exported
function exportProducts() {
	var categoriesMap = getCategoriesMap();
	var productIterator : SeekableIterator = ProductMgr.queryAllSiteProducts();
	
	var jobId = generateUniqueId();
	notifyExportStatus("started", jobId, getTotalProductCount());

	var product : Product = productIterator.next();
	var counter = 0;

	if(product){
		var exported : Boolean = exportProduct(product, categoriesMap);
		if (exported) counter += 1;
		
		while (productIterator.hasNext()) {
			product = productIterator.next();
			exported = exportProduct(product, categoriesMap);
			if (exported) counter += 1;
		}
	}

	productIterator.close();
	notifyExportStatus("finished", jobId, counter);
}

// Extract Demandware data and create product data
function exportProduct(product : Product, categoriesMap: Object) {
	try {
	if(product.online && product.searchable && !product.variant) {
		// Name
		var productName : String = product.getName();

		// SKU (SKU is unique to company, UPC is universal product code)
		var productSKU : String = product.getID();

		var skuReference = Site.current.preferences.custom.SkuReference;
		if(product.getManufacturerSKU() != null && !empty(product.getManufacturerSKU()) && skuReference == 'Manufacturer SKU') {
			productSKU = product.getManufacturerSKU();
		}

		// Now that we have a proper place to store the native ID,
		// we'll get the same value, but put it in a more reasonable place
		// This is more for in the case that we DO have manufacturer SKUs
		// NOTE: THERE IS NO LONG TYPE IN JAVASCRIPT, WHICH .DS IS BASED ON
		// I TRIED, OH LORD I TRIED
		var productNativeId : Int = parseInt(product.getID());

		// Product URL
		var productUrl : String = URLUtils.http('Product-Show', 'pid', product.getID());
		// URLUtils.http generates URLs based on the Demandware hostname: dev.web.XXX.demandware.net, etc.
		// If the 'ProductHost' custom preference is provided, replace the hostname with that.
		if (Site.current.preferences.custom.ProductHost != null) {
			productUrl = productUrl.host(Site.current.preferences.custom.ProductHost);
		}

		// Product Photo
		var productPhoto : String = "";

		var image = product.getImage('large',0);
		// This was our original case, where we look for the 'large' version of
		// the master product, and use that image if it exists
		if (!empty(image)){
			productPhoto = image.absURL.toString();
		// This is thanks to Dan Veksler (BUGZ-1104), where the master product
		// might not have an image, and we just try to use the first variation's 'large' image.
		// Even this misses the edge case that the first variation it checks doesn't have
		// an image, but another one does
		} else {
			var varModel : dw.catalog.ProductVariationModel = product.variationModel;
			if (!empty(varModel) && !empty(varModel.defaultVariant) && !empty(varModel.defaultVariant.getImage('large',0)) ) {
				productPhoto = varModel.defaultVariant.getImage('large',0).getHttpURL().toString();
			}
		}
		// Demandware storefronts by default, seem to all have an /images/noimagesmall.png file
		// However, even if it's not valid, and 404s, it looks like out platform
		// will process the product correctly, nonetheless, and just serve an empty image
		// where the product image would be
		// tl;dr - I'm okay with hardcoding /images/noimagesmall.png here
		if (empty(productPhoto)) {
			productPhoto = URLUtils.absStatic('/images/noimagesmall.png');
		}
		
		// As of 2016-12, we also want the rest of the images
		var allImages = product.getImages('large');
		var allProductPhotos = [];
		for each(var image in allImages) {
			allProductPhotos.push(image.absURL.toString());
		}

		// Product UPC, checking for a non-null ret just in case (even though as of 2016-02-29, it's defaulting to empty string)
		var productUPC : String = null;
		if (product.getUPC()){
			productUPC = product.getUPC();
		}

        // Product Price
        var productPrice : Decimal = null;
        if (product.getPriceModel()){
            
            try {
        	
            	// For the most part, master products don't have price, we need to get from a variant
	            // getDefaultVariant() will give us either the default variant or an arbitrary one
	            // I'm okay with getting an arbitrary one
            	var productVariant = product.getVariationModel().getDefaultVariant();

            	if (productVariant == null) {
            		productPrice = product.getPriceModel().getPrice().decimalValue.valueOf();
            	// But some products don't have variants, and have a PriceModel object on the Product
            	} else {
            		productPrice = productVariant.getPriceModel().getPrice().decimalValue.valueOf();
            	}
            	
            } catch(err) {
            	Logger.warn("Could not get the price for product id: " + product.ID);
            	Logger.warn(err.message);
            }
        }

		// Product Stock
		var productStock : Int = null;
		if (product.getAvailabilityModel()){
			// 2016-03-23: product.getAvailabilityModel().availability uses some fancy algorithm,
			// described by the documentation as the following:
			// If inventory lists are in use:
			// 	If no inventory record exists and the inventory list default-in-stock flag is true this method returns 1.
			//	If no inventory record exists the inventory list default-in-stock flag is false this method returns 0.
			//	If the product is not available this method returns 0.
			//	If the product is perpetually available this method returns 1.
			//	Otherwise this method returns the ATS / allocation.
			// What I really want is the sum of all variants
			// BUT I DON'T HAVE IT BECAUSE I NEVER FIGURED OUT HOW TO LOOP THROUGH VARIANTS
			// IN DEMANDWARE - Instead, I'll settle for a 0/1, which I've tested
			// Check CR-534
			productInventoryRecord = product.getAvailabilityModel().getInventoryRecord();
			if (product.getAvailabilityModel().isInStock()) {
				productStock = 1;
			} else {
				productStock = 0;
			}
		}
		
		// Categories
		var categoriesFormatted = [];
		try {
			var categoryAssignments = product.getCategoryAssignments();
			var idsSeen = [];
			for (var i = 0; i < categoryAssignments.length; i++) {
				var category = categoryAssignments[i].getCategory();
				var categoryId = category.getID();
				if (typeof categoriesMap[categoryId] === 'undefined') continue; // Skip if this is a category that does not belong to site's catalog

				if (idsSeen.indexOf(categoryId) === -1) {
					categoriesFormatted.push({
						'category_name': categoriesMap[categoryId]['fullName'],
						'category_id': categoryId
					});
					idsSeen.push(categoryId);
				};

				// We also want to get the parent categories in here
				var parentCategoriesIds = categoriesMap[categoryId]['parentIDs'];
				for (var j = 0; j < parentCategoriesIds.length; j++) {
					var categoryId = parentCategoriesIds[j];
					if (idsSeen.indexOf(categoryId) === -1) {
						categoriesFormatted.push({
							'category_id': categoryId,
							'category_name': categoriesMap[categoryId]['fullName']
						});
						idsSeen.push(categoryId);
					}
				}
			}
		} catch (err) {
			Logger.warn("Could not get the categories for product id: " + product.ID);
			Logger.warn(err.message);
		}

		// Currency
		var currency : String = Site.getCurrent().getDefaultCurrency();
		var variantIterator = product.getVariants().iterator();
		var variantsDict : Object = new Object();
		
		while (variantIterator.hasNext()) {
			var variant = variantIterator.next();
			var variantID = variant.getID();
			var variantObj : Object = new Object();

			var inventoryRecord = variant.getAvailabilityModel().getInventoryRecord();
			if (inventoryRecord) {
				variantObj["variant_stock"] = inventoryRecord.getStockLevel().getValue();
			} else {
				variantObj["variant_stock"] = null;
			}

			variantObj["variant_sku"] = variantID;
			variantsDict[variantID] = variantObj;
			
			var variantPhotos = variant.getImages('large');
			for (var i = 0; i < variantPhotos.length; i++) {
				var photoURL = variantPhotos[i].absURL.toString();
				if (allProductPhotos.indexOf(photoURL) === -1) allProductPhotos.push(photoURL);
			}
		}

		// Extra Fields
		var productExtraFields = JSON.stringify({
			"product_photos": allProductPhotos,
			"categories": categoriesFormatted
		});
		
		if(productName && productSKU && productUrl){
			// Create album through Pixlee API
			createProduct(productName, productSKU, productUrl, productPhoto, productUPC, productPrice, productStock, productNativeId, productExtraFields, currency, JSON.stringify(variantsDict));
			return true;
		} else {
			return false;
		}
	}
    } catch (ex) {
       Logger.warn("The following exception occured for the product id: " +  product.ID);
       Logger.warn(ex.message);
       return false;
    }
}

// Create JSON object, sign data and post to API
function createProduct(productName : String, productSKU : String, productUrl : String, productPhoto : String, productUPC : String, productPrice: Double, productStock : Int, productNativeId : Int, productExtraFields : Object, currency : String, variantsJson: String) {
	var dataObj = createDataObj(productName, productSKU, productUrl, productPhoto, productUPC, productPrice, productStock, productNativeId, productExtraFields, currency, variantsJson);
	postToAPI( dataObj );
}

// Create JSON object
function createDataObj(productName : String, productSku : String, productUrl : String, productPhoto : String, productUPC : String, productPrice : Double, productStock : Int, productNativeId : Int, productExtraFields : Object, currency: String, variantsJson: String) {
	// Product
	var productObj : Object = new Object();
	productObj.name = productName;
	productObj.sku = productSku;
	productObj.buy_now_link_url = productUrl.toString();
	productObj.product_photo = productPhoto;
	productObj.upc = productUPC;
	productObj.price = productPrice;
	productObj.stock = productStock;
	productObj.native_product_id = productNativeId;
	productObj.extra_fields = productExtraFields;
	productObj.currency = currency;
	productObj.variants_json = variantsJson;

    // Data
    var dataObj : Object = new Object();
    dataObj.title = productName;
    dataObj.product = productObj;
    dataObj.album_type = 'product';
    dataObj.live_update = false;
    dataObj.num_photos = 0;
    dataObj.num_inbox_photos = 0;

    return dataObj;
}

function getCategoriesMap() {
	// Very Easy
	// The root node is available to us.
	// We're gonna do a BFS (iterative) to traverse the entire tree with an small modification, we will keep track of the path to the current node.
	// By path, we mean an array of category ids from the parent category all the way to the root category.
	// The way we do it is by attaching the path along with the children when enqueuing them.
	// The result we want is a hash with category_ids as keys and an object with two properties as values.
	// The first property of the object will be the full name of the category. For example - Women > SkinCare > Sunscreen.
	// The second property would be the path to the parent.

	// One more thing, sorry
	// We need to keep track of the path in such a way that getting both full names and paths is cheap i.e. without additional API calls.
	// We can do this in many ways, but I'm use more space and keep track of all category_ids and names (not full names) in a seperate hash. 
	// We'll call it namesMap.

	var catalog = CatalogMgr.getSiteCatalog();
	var root = catalog.getRoot();
	
	var queue = [];
	var namesMap = {};
	var result = {};
	
	// We want to skip the root node in front of all categories
	var topLevelCategories = root.getSubCategories();
	for (var i = 0; i < topLevelCategories.length; i++) {
		queue.push(
			{ 'node': topLevelCategories[i], 'path': [] }
		);
	}

	// BFS starts here
	while (queue.length > 0) {
		var currentNode = queue.shift(); // dequeue
		var category = currentNode['node'];
		var pathToNode = currentNode['path'];

		// API calls
		var categoryID = category.getID();
		var categoryName = category.getDisplayName();
		var childrenNodes = category.getSubCategories();

		// Add the combination to the namesMap
		namesMap[categoryID] = categoryName;
		
		result[categoryID] = {
			fullName: getFullName(pathToNode, namesMap, categoryName),
			parentIDs: pathToNode.slice() // JS way of copying an array by value not reference
		}
		
		// For all the children of this node, add the current category to the path
		pathToNode.push(categoryID);
		for (var i = 0; i < childrenNodes.length; i++) {
			queue.push({ 'node': childrenNodes[i], 'path': pathToNode.slice() });
		}
	}

	// Helper function. Consumes the namesMap and gives back the full name
	function getFullName(pathStack, namesMap, categoryName) {
		var fullName = '';
		for (var i = 0; i < pathStack.length; i++) {
			var parentID = pathStack[i];
			fullName += namesMap[parentID] + " > ";
		}
		fullName += categoryName;
		return fullName;
	};

	return result;
};

// Given an object, generate the signature
function generateSignature(dataObj : Object) {
	return dw.crypto.Encoding.toBase64(Mac(dw.crypto.Mac.HMAC_SHA_1).digest(JSON.stringify(dataObj),
																			Site.current.preferences.custom.PixleeSecretKey));
}

// Post JSON data to API
function postToAPI(payload : Object) {
	var service:Service;
	var result:Result;
	var signature = generateSignature(payload);

	service = ServiceRegistry.get("int_pixlee.http.distillery.post");
	service.URL = getDistilleryBaseUrl() + "?api_key="+Site.current.preferences.custom.PixleeApiKey;

	result = service.call(payload, signature);
	return result;
}

// Determine endpoint based on the environment
// 2016-05-10: Anything customer-facing is "production" as far as WE are concerned
// Don't point someone to OUR staging DB, which is volatile
function getDistilleryBaseUrl() {
    return DISTILLERY_BASE_URL;
}

// Check if input is a number
function isPositiveInt(s)
{
    var i = +s; // convert to a number
    if (i < 0) return false; // make sure it's positive
    if (i != ~~i) return false; // make sure there's no decimal part
    return true;
}

function notifyExportStatus(status, jobId, numProducts) {
	var apiKey = Site.current.preferences.custom.PixleeApiKey;
	var httpClient : HTTPClient = new HTTPClient();
	httpClient.open('POST', 'https://distillery.pixlee.com/api/v1/notifyExportStatus?api_key=' + apiKey);
	httpClient.setRequestHeader('Content-Type', 'application/json');
	
	var post_body = {
		api_key: apiKey,
		status: status,
		job_id: jobId,
		num_products: numProducts,
		platform: "demandware"
	};
	
	httpClient.send(JSON.stringify(post_body));
	if (httpClient.statusCode == 200) {
		Logger.warn("REQUEST MADE");
	} else {
		Logger.warn("REQUEST FAILED");
	}
}

function getTotalProductCount() {
	var productIterator : SeekableIterator = ProductMgr.queryAllSiteProducts();
	var count : Number = 0;

	while (productIterator.hasNext()) {
		var product : Product = productIterator.next();
		if (product.online && product.searchable && !product.variant) {
			count += 1;
		}
	}

	return count;
}

function generateUniqueId() {
	function s4() {
		return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
	}
	return s4() + s4() + s4();
}

// Export the "execute" function for the Job Schedule
module.exports = {
	execute: function(){
		return execute();
	}
}