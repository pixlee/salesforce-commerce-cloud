/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*-   @input ExampleIn : String This is a sample comment.
*-   @output ExampleOut : Number
*
*/
importPackage( dw.system );
importPackage( dw.crypto );
importPackage( dw.util );
importPackage( dw.catalog );
importPackage( dw.web );
importPackage( dw.io );
importPackage( dw.net );
importPackage( dw.content );

var DISTILLERY_BASE_URL_DEVELOPMENT = "https://backstage-distillery.pixlee.com/api/v2/albums";
var DISTILLERY_BASE_URL_STAGING = "https://backstage-distillery.pixlee.com/api/v2/albums";
var DISTILLERY_BASE_URL_PRODUCTION = "http://distillery.pixlee.com/api/v2/albums";

// Main method for export product execution
function execute( args : PipelineDictionary ) : Number
{
	try {
		if(Site.current.preferences.custom.PixleeSecretKey == null || Site.current.preferences.custom.PixleeApiKey == null){
			Logger.error("Pixlee Secret Key is not defined.");
			return PIPELET_ERROR;  
		}

		if(Site.current.preferences.custom.PixleeEnabled == false){
			Logger.error("Cartridge not enabled.");
			return PIPELET_ERROR;  
		}

		exportProducts();
	} catch(ex) {
		var error = ex.message;
		Logger.error("Exception caught" + ex.message);
		return PIPELET_ERROR;    
	}

	return PIPELET_NEXT;
}

// Iterates through the products and prepare the data to be exported
function exportProducts() {
	var productIterator : SeekableIterator = ProductMgr.queryAllSiteProducts();

	var product : Product = productIterator.first();

	if(product){
		exportProduct(product);

		while(productIterator.hasNext()) {
			product = productIterator.next();
			exportProduct(product);
		}
	}

	productIterator.close();
}

// Extract Demandware data and create product data
function exportProduct(product : Product) {
	if(product.online && product.searchable && !product.variant) {
		// Name
		var productName : String = product.getName();

		// SKU (SKU is unique to company, UPC is universal product code)
		var productSKU : String = product.getID();

		var skuReference = Site.current.preferences.custom.SkuReference;
		if(product.getManufacturerSKU() != null && !empty(product.getManufacturerSKU()) && skuReference == 'Manufacturer SKU') {
			productSKU = product.getManufacturerSKU();
		}

		// Product URL
		var productUrl : String = URLUtils.http('Product-Show', 'pid', product.getID());
		// URLUtils.http generates URLs based on the Demandware hostname: dev.web.XXX.demandware.net, etc.
		// If the 'ProductHost' custom preference is provided, replace the hostname with that.
		if (Site.current.preferences.custom.ProductHost != null) {
			productUrl = productUrl.host(Site.current.preferences.custom.ProductHost);
		}

		// Product Photo
		var productPhoto : String = "";
		if(product.getImage('large')){
			productPhoto = product.getImage('large').getHttpURL().toString();
		}
		
		// Product UPC, checking for a non-null ret just in case (even though as of 2016-02-29, it's defaulting to empty string)
		var productUPC : String = "";
		if (product.getUPC()){
			productUPC = product.getUPC();
		}

		// Product Stock
		var productStock : Long = null;
		if (product.getAvailabilityModel()){
			// I've seen at least one case of availabililty return a float very close to, but not quite, 1
			// [2016-03-01 07:31:24.870 GMT] WARN JobThread|11116134|Pixlee.ExportProducts|Pixlee-RunExportProducts custom   0.9992857142857143
			// So, we'll add .5, cast to int, and let the casting chop off the decimals
			productStock = parseInt(product.getAvailabilityModel().availability + 0.5);
		}
		
		if(productName && productSKU && productUrl){
			// Create album through Pixlee API
			createProduct(productName, productSKU, productUrl, productPhoto, productUPC, productStock);
		}
	}
}

// Create JSON object, sign data and post to API
function createProduct(productName : String, productSKU : String, productUrl : String, productPhoto : String, productUPC : String, productStock : Int) {
	var dataObj = createDataObj(productName, productSKU, productUrl, productPhoto, productUPC, productStock);
	var signedDataObj = signData(dataObj);
	postToAPI( signedDataObj );
}

// Create JSON object
function createDataObj(productName : String, productSku : String, productUrl : String, productPhoto : String, productUPC : String, productStock : Int) {
	// Product
	var productObj : Object = new Object();
	productObj.name = productName;
	productObj.sku = productSku;
	productObj.buy_now_link_url = productUrl.toString();
	productObj.product_photo = productPhoto;
	productObj.upc = productUPC;
	productObj.stock = productStock;

    // Data
    var dataObj : Object = new Object();
    dataObj.title = productName;
    dataObj.product = productObj;
    dataObj.album_type = 'product';
    dataObj.num_photos = 0;
    dataObj.num_inbox_photos = 0;

    return dataObj;
}

// Sign and authenticate the JSON data
function signData(dataObj : Object) {
	dataObj.api_key = Site.current.preferences.custom.PixleeApiKey;
	dataObj.signature = dw.util.StringUtils.encodeBase64(Mac(dw.crypto.Mac.HMAC_SHA_1).digest(JSON.stringify(dataObj), Site.current.preferences.custom.PixleeSecretKey));
	return dataObj;
}

// Post JSON data to API
function postToAPI(payload : Object) {
	var baseUrl = getDistilleryBaseUrl();
	var urlToSend = baseUrl+"?api_key="+Site.current.preferences.custom.PixleeApiKey;

	var payloadJSON = JSON.stringify(payload);
	var httpSvc : HTTPClient = new HTTPClient();
	
	if(isPositiveInt(Site.current.preferences.custom.HttpTimeout)){
		httpSvc.setTimeout(Site.current.preferences.custom.HttpTimeout);
	}

	httpSvc.open("POST", urlToSend);
	httpSvc.setRequestHeader("Content-Type", "application/json");
	httpSvc.send(payloadJSON);
}

// Determine endpoint based on the environment
function getDistilleryBaseUrl() {
	if(dw.system.System.getInstanceType() == dw.system.System.PRODUCTION_SYSTEM) {
		return DISTILLERY_BASE_URL_PRODUCTION;
	} else if(dw.system.System.getInstanceType() == dw.system.System.STAGING_SYSTEM) {
		return DISTILLERY_BASE_URL_STAGING;
	}
	
	return DISTILLERY_BASE_URL_DEVELOPMENT;
}

// Check if input is a number
function isPositiveInt(s)
{
    var i = +s; // convert to a number
    if (i < 0) return false; // make sure it's positive
    if (i != ~~i) return false; // make sure there's no decimal part
    return true;
}
